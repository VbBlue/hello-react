{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quswj\\\\ReactProject\\\\firstProject\\\\hello-react\\\\src\\\\Counter.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      number: 0,\n      fixedNumber: 0\n    };\n  }\n\n  render() {\n    const {\n      number,\n      fixedNumber\n    } = this.state; // state를 조회할 때는 this.state로 조회합니다.\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uBC14\\uB00C\\uC9C0 \\uC54A\\uB294 \\uAC12: \", fixedNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.\n        onClick: () => {\n          this.setState(prevState => {\n            return {\n              number: prevState.number + 1\n            };\n          }); //this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.\n          //this.setState({ number: number + 1 });\n        },\n        children: \"+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"names":["React","Component","Counter","state","number","fixedNumber","render","setState","prevState"],"sources":["C:/Users/quswj/ReactProject/firstProject/hello-react/src/Counter.js"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     // state의 초깃값 설정하기\r\n  //     this.state = {\r\n  //       number: 0,\r\n  //       fixedNumber: 0,\r\n  //     };\r\n  //   }\r\n\r\n  state = {\r\n    number: 0,\r\n    fixedNumber: 0,\r\n  };\r\n\r\n  render() {\r\n    const { number, fixedNumber } = this.state; // state를 조회할 때는 this.state로 조회합니다.\r\n    return (\r\n      <div>\r\n        <h1>{number}</h1>\r\n        <h2>바뀌지 않는 값: {fixedNumber}</h2>\r\n        <button\r\n          // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.\r\n          onClick={() => {\r\n            this.setState((prevState) => {\r\n              return {\r\n                number: prevState.number + 1,\r\n              };\r\n            });\r\n            //this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.\r\n            //this.setState({ number: number + 1 });\r\n          }}\r\n        >\r\n          +1\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;EAAA;IAAA;IAAA,KAU9BE,KAV8B,GAUtB;MACNC,MAAM,EAAE,CADF;MAENC,WAAW,EAAE;IAFP,CAVsB;EAAA;;EAe9BC,MAAM,GAAG;IACP,MAAM;MAAEF,MAAF;MAAUC;IAAV,IAA0B,KAAKF,KAArC,CADO,CACqC;;IAC5C,oBACE;MAAA,wBACE;QAAA,UAAKC;MAAL;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,uDAAeC,WAAf;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QACE;QACA,OAAO,EAAE,MAAM;UACb,KAAKE,QAAL,CAAeC,SAAD,IAAe;YAC3B,OAAO;cACLJ,MAAM,EAAEI,SAAS,CAACJ,MAAV,GAAmB;YADtB,CAAP;UAGD,CAJD,EADa,CAMb;UACA;QACD,CAVH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAoBD;;AArC6B;;AAwChC,eAAeF,OAAf"},"metadata":{},"sourceType":"module"}